岛屿问题是一类经典的网格搜索类问题，参考Leetcode 200（岛屿数量）,1905（统计子岛屿）,463（岛屿的周长）,695（岛屿的最大面积）,1254（统计封闭岛屿的数目）
常用的求解方法是深度优先搜索或广度优先搜索，然后根据具体问题求解，参考https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/
方法1：深度优先搜索（DFS）模板
void dfs(vector<vector<int>>&grid,int m,int n){
  if(m<0 || n<0 || m>=grid.size() || n>=grid[0].size()){
     return;
  }
  if(grid[m][n]==2) return; //已经遍历过的，直接返回，防止重复遍历
  grid[m][n]=2 
  dfs(grid,m-1,n);
  dfs(grid,m+1,n);
  dfs(grid,m,n-1);
  dfs(grid,m,n+1);
}
方法2：广度优先搜索模板
  可以使用广度优先搜索代替深度优先搜索，使用队列，在扫描二维网格时，如果位置为1，则将其加入队列，并开始进行广度优先搜索。在搜索的过程中，每个搜索的1需要被标记上，防止重复搜索。直到队列为空，
  搜索结束。
  wfs(vector<vector<int>> grid,int m,int n){
    queue<pair<int,int>> que;
    que.push({m,n});
    grid[m][n]=2; //标记上
    while(!que.empty()){
      int x=que.front().first;
      int y=que.front().second;
      que.pop();
      if(x-1>=0 && grid[x-1][y]==1){
        que.push({x-1,y};
        grid[x-1][y]=2;
        }
       if(x+1<grid.size() && grid[x+1][y]==1){
        que.push({x+1,y};
        grid[x+1][y]=2;
        }
        if(y-1>=0 && grid[x][y-1]==1){
        que.push({x1,y-1};
        grid[x][y]=2;
        }
        if(y+1<grid[0].size() && grid[x][y+1]==1){
        que.push({x,y+1};
        grid[x][y+1]=2;
        }
      }
    }
  
  
      
